from datetime import datetime as dt


def count_negatives(grid):
    total_count = 0
    for g_list in grid:
        g_len = len(g_list)
        l_limit = 0
        r_limit = g_len - 1
        is_zero = False
        while l_limit <= r_limit:
            mid = l_limit + (r_limit - l_limit) // 2
            if g_list[mid] == 0:
                limit_i = True
                while mid < g_len - 1 and limit_i:
                    mid += 1
                    if g_list[mid] != 0:
                        limit_i = False
                        mid -= 1
                is_zero = True
                break
            elif g_list[mid] > 0:
                l_limit = mid + 1
            else:
                r_limit = mid - 1
        if is_zero:
            total_count += g_len - (mid + 1)
        else:
            total_count += g_len - l_limit
    return total_count


def count_negatives_n(grid):
    total_count = 0
    for g_list in grid:
        for ele in g_list:
            if ele < 0:
                total_count += 1
    return total_count


if __name__ == '__main__':

    input_grid = [[16, 16, 16, 16, 15, 14, 14, 13, 13, 13, 12, -9, -9, -10, -10, -10, -10, -11, -11, -11],  # 9
                  [15, 14, 14, 14, 14, 13, 13, 12, 11, 10, 9, -9, -10, -11, -12, -13, -14, -14, -14, -14],  # 18
                  [15, 14, 14, 13, 12, 12, 12, 11, 10, 10, 9, -10, -10, -12, -12, -14, -14, -14, -14, -15],  # 27
                  [15, 13, 13, 13, 11, 10, 9, 9, 8, 7, 6, -11, -12, -13, -14, -15, -15, -16, -17, -18],  # 36
                  [14, 13, 12, 12, 11, 9, 8, 7, 7, 6, 5, -11, -12, -13, -15, -16, -16, -17, -17, -19],  # 45
                  [14, 13, 12, 12, 10, 9, 7, 6, 6, 6, -10, -12, -12, -13, -16, -16, -17, -18, -18, -20],  # 55
                  [13, 12, 12, 11, 9, 9, 7, 5, 5, 5, -10, -13, -13, -13, -17, -18, -19, -20, -20, -20],  # 65
                  [13, 12, 11, 11, 8, 7, 7, 4, 3, 2, -10, -14, -15, -16, -18, -18, -20, -20, -20, -20],  # 75
                  [13, 12, 10, 9, 7, 7, 7, 4, 3, 1, -11, -15, -15, -16, -18, -19, -20, -20, -20, -20],  # 85
                  [12, 12, 9, 9, 7, 7, 7, 4, 2, 0, -11, -15, -15, -17, -19, -20, -20, -20, -20, -20],  # 95
                  [12, 11, 8, 7, 7, 6, 6, 3, 2, 0, -11, -15, -15, -18, -20, -20, -20, -20, -20, -20],  # 105
                  [12, 11, 8, 6, 6, 5, 4, 2, 1, -1, -11, -16, -17, -19, -20, -20, -20, -20, -20, -20],  # 116
                  [11, 10, 8, 6, 6, 5, 3, 1, 0, -1, -12, -18, -18, -20, -20, -20, -20, -20, -20, -20],  # 127
                  [11, 10, 7, 5, 4, 4, 2, 0, 0, -1, -13, -18, -19, -20, -20, -20, -20, -20, -20, -20],  # 138
                  [11, 10, 7, 4, 4, 4, 2, 0, 0, -2, -13, -19, -19, -20, -20, -20, -20, -20, -20, -20],  # 149
                  [10, 9, 6, 3, 2, 1, 0, 0, 0, -3, -13, -19, -19, -20, -20, -20, -20, -20, -20, -20],
                  [9, 9, 5, 2, -5, -6, -7, -7, -8, -9, -14, -19, -19, -20, -20, -20, -20, -20, -20, -20],
                  [9, 9, 5, 2, -5, -6, -7, -7, -9, -10, -15, -19, -19, -20, -20, -20, -20, -20, -20, -20],
                  [9, 8, 5, 1, -6, -7, -8, -9, -9, -11, -15, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [8, 8, 5, -2, -13, -14, -14, -15, -15, -16, -17, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [7, 6, 4, -2, -13, -14, -14, -15, -16, -17, -17, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [6, 5, 4, -2, -13, -14, -14, -15, -17, -18, -19, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [5, 5, -7, -8, -14, -14, -15, -16, -17, -19, -19, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [5, 4, -7, -8, -14, -15, -16, -16, -17, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [4, 4, -7, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [4, 3, -7, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [4, 3, -7, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [4, 2, -8, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [4, 1, -8, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [3, 0, -9, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [2, -1, -10, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [1, -2, -11, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [0, -2, -11, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20],
                  [-1, -3, -12, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20, -20]]

    for mult in range(12):
        input_grid += input_grid
    # input_grid = [[3, 2], [1, 0]]
    for time in range(100):
        start = dt.now()
        count_negatives_n(input_grid)
        duration = dt.now() - start
        print(str(time + 1) + ' Try : ' + str(duration.microseconds / 10000) + ' ms')
